buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.8.1'
    id "com.jfrog.artifactory" version "3.0.1"
    id "com.bmuschko.docker-java-application" version "3.0.11"
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: "com.bmuschko.docker-java-application"

import com.bmuschko.gradle.docker.tasks.image.*

scmVersion {
    versionCreator 'versionWithBranch'
}

project.ext.dockerBaseImage = "binarybabel/oracle-jdk:8-alpine"
project.ext.basename='active-publisher-tracker-backend'
project.group 'active-publisher-tracker'
mainClassName = 'com.precognox.publishertracker.PublisherTrackerApplication'
project.version = scmVersion.version

project.ext.dockerDefaultCommand = ['bash', '-c', "dockerize -template " +
        "/${rootProject.name}/config.yml.template:/${rootProject.name}/config.yml " +
        "/${rootProject.name}/bin/${rootProject.name} server /${rootProject.name}/config.yml"
]

configurations.all {
    resolutionStrategy {
        force 'org.slf4j:slf4j-api:1.7.25'
    }
}

dependencies {
    //dropwizard
    compile 'javax.ws.rs:javax.ws.rs-api:2.0'
    compile 'io.dropwizard:dropwizard-core:1.0.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.7.6'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    //DB
    compile group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.0.Final'
    compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.1.0'
    compile 'org.avaje.ebean:ebean:9.2.1'
    
    compile 'org.avaje.ebean:ebean-agent:8.2.1'
    
    compile('io.dropwizard:dropwizard-migrations:1.1.0') {
        exclude group: 'io.dropwizard', module: 'dropwizard-db'
    }

    compile 'org.projectlombok:lombok:1.16.6'
    compile 'org.keycloak:keycloak-core:3.2.1.Final'
    compile 'org.keycloak:keycloak-admin-client:3.2.1.Final'
    compile 'org.jboss.resteasy:resteasy-client:3.1.3.Final'
    compile 'org.jboss.resteasy:resteasy-jackson2-provider:3.0.14.Final'
    compile 'org.jboss.resteasy:resteasy-multipart-provider:3.0.14.Final'
    
    compile 'org.secnod.dropwizard:dropwizard-shiro:0.2.0'

    compile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.4.9'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.18'
    compile 'commons-io:commons-io:2.6'
    compile group: 'org.apache.velocity', name: 'velocity', version: '1.7'
    compile group: 'javax.mail', name: 'javax.mail-api', version: '1.5.6'
    compile group: 'com.sun.mail', name: 'javax.mail', version: '1.5.6'
    
    testCompile 'junit:junit:4.12'
    testCompile 'com.h2database:h2:1.4.193'
    testCompile group: 'io.dropwizard', name: 'dropwizard-testing', version: '1.1.3'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
}

// ebean enchancement
classes.doLast {
    javaexec {
        classpath = sourceSets.main.compileClasspath
        main = 'com.avaje.ebean.enhance.ant.MainTransform'
        args = [
            compileJava.destinationDir,
                'com.precognox.publishertracker.entities',
                'debug=1'
        ]
    }
}

project.distTar {
    compression = 'gzip'
    extension = "tar.gz"
}

task createDockerfile(type: Dockerfile, overwrite: true){
    doFirst {
        project.copy {
            from "src/dist"
            into "build/dist"
        }
    }
    dependsOn = [':distTar']
    destFile = project.file('build/Dockerfile')
    from project.hasProperty("dockerBaseImage") ? project.dockerBaseImage : "${project.registry_url}/common/jdk8:0.1.2-slim"
    maintainer 'Andras Kalman "akalman@precognox.com"'

    def appFolder = "/"

    addFile "distributions/${project.distTar.archiveName}", "/tmp"
    runCommand "mv /tmp/${project.applicationName}-${project.version} /${project.applicationName}"

    workingDir  "${appFolder}"
    if (project.hasProperty("dockerDefaultCommand")) {
        println "TASK:${project.dockerDefaultCommand.class}"
        defaultCommand { project.dockerDefaultCommand.each {it} }
    } else {
        defaultCommand  "/${project.applicationName}/bin/${project.applicationName}", "server", "${project.applicationName}/config.yml"
    }
}

task dockerBuildImage(overwrite: true) {
    def imageTag = "$project.registry_url/${project.group.toLowerCase()}/${project.name.toLowerCase()}" 
    def imageTagWithVersion = "$imageTag:${project.version.toLowerCase()}" 
    def jTask = project.tasks.create(name: 'dockerBuildImage', type: Exec, overwrite: true)

    jTask.dependsOn = [":clean", ":installDist", ":createDockerfile"]
    jTask.args = ['build', '-t', imageTag, '-t', imageTagWithVersion, project.buildDir]
    jTask.executable = "docker"
}